// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/client/task/create": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "创建测试任务",
                "parameters": [
                    {
                        "description": "Task Object",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.TaskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code = success? 1 : 0",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/_httpUtils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Task"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/client/task/list": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "列出测试任务",
                "parameters": [
                    {
                        "type": "string",
                        "description": "progress: consts.BuildProgress",
                        "name": "progress",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status: consts.BuildStatus",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "keywords",
                        "name": "keywords",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page no",
                        "name": "pageNo",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code = success? 1 : 0",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/_httpUtils.ResponsePage"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Task"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/client/task/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "获取测试任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code = success? 1 : 0",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/_httpUtils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/v1.TaskResp"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "更新测试任务",
                "parameters": [
                    {
                        "description": "Task Object",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1.TaskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code = success? 1 : 0",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/_httpUtils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.Task"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "删除测试任务",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "code = success? 1 : 0",
                        "schema": {
                            "$ref": "#/definitions/_httpUtils.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "_httpUtils.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "_httpUtils.ResponsePage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "pageNo": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                },
                "totalPage": {
                    "type": "integer"
                }
            }
        },
        "domain.BuildHistory": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nodeIp": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "integer"
                },
                "ownerType": {
                    "type": "string"
                },
                "progress": {
                    "type": "string"
                },
                "queueId": {
                    "type": "integer"
                },
                "resultPath": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "vncAddress": {
                    "type": "string"
                }
            }
        },
        "model.Environment": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedAt": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "imageName": {
                    "type": "string"
                },
                "imageSrc": {
                    "type": "string"
                },
                "osCategory": {
                    "type": "string"
                },
                "osLang": {
                    "type": "string"
                },
                "osType": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "taskId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Task": {
            "type": "object",
            "properties": {
                "appUrl": {
                    "type": "string"
                },
                "browserType": {
                    "description": "Enums consts.BrowserType",
                    "type": "string",
                    "example": "chrome"
                },
                "browserVersion": {
                    "type": "string"
                },
                "buildCommands": {
                    "type": "string"
                },
                "buildType": {
                    "description": "Enums consts.BuildType",
                    "type": "string",
                    "example": "selenium"
                },
                "createdAt": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedAt": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "endTime": {
                    "type": "string"
                },
                "envVars": {
                    "type": "string"
                },
                "environments": {
                    "description": "for selenium test",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Environment"
                    }
                },
                "groupId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isDockerNative": {
                    "type": "boolean"
                },
                "keepResultFiles": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "pendingTime": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer"
                },
                "progress": {
                    "description": "Enums consts.BuildProgress",
                    "type": "string",
                    "example": "created"
                },
                "resultFiles": {
                    "type": "string"
                },
                "scmAccount": {
                    "type": "string"
                },
                "scmAddress": {
                    "type": "string"
                },
                "scmPassword": {
                    "type": "string"
                },
                "scriptUrl": {
                    "type": "string"
                },
                "serials": {
                    "description": "for appium test",
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "status": {
                    "description": "Enums consts.BuildStatus",
                    "type": "string",
                    "example": "pass"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "v1.Environment": {
            "type": "object",
            "properties": {
                "osCategory": {
                    "type": "string"
                },
                "osLang": {
                    "type": "string"
                },
                "osType": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                }
            }
        },
        "v1.TaskReq": {
            "type": "object",
            "properties": {
                "appUrl": {
                    "type": "string"
                },
                "browserType": {
                    "description": "Enums consts.BrowserType",
                    "type": "string",
                    "example": "chrome"
                },
                "browserVersion": {
                    "type": "string"
                },
                "buildCommands": {
                    "type": "string"
                },
                "buildType": {
                    "description": "Enums consts.BuildType",
                    "type": "string",
                    "example": "selenium"
                },
                "envVars": {
                    "type": "string"
                },
                "environments": {
                    "description": "for selenium test",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Environment"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "isDockerNative": {
                    "type": "boolean"
                },
                "keepResultFiles": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "integer"
                },
                "resultFiles": {
                    "type": "string"
                },
                "scmAccount": {
                    "type": "string"
                },
                "scmAddress": {
                    "type": "string"
                },
                "scmPassword": {
                    "type": "string"
                },
                "scriptUrl": {
                    "type": "string"
                },
                "serials": {
                    "description": "for appium test",
                    "type": "string"
                }
            }
        },
        "v1.TaskResp": {
            "type": "object",
            "properties": {
                "buildHistories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.BuildHistory"
                    }
                },
                "data": {
                    "$ref": "#/definitions/model.Task"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
