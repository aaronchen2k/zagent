// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/host/en/messages.json
// res/host/en/usage.txt
// res/host/res.go
// res/host/zh/messages.json
// res/host/zh/usage.txt
package hostRes

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resHostEnMessagesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xd1\x8e\x9b\x30\x10\x45\xdf\xf9\x8a\x2b\x56\x68\x5f\x68\x3e\x80\xdf\xa8\xf6\xa9\xaa\x8c\x17\x26\xc8\x92\xb1\x91\xc7\xb0\xd5\x46\xf9\xf7\xca\x06\x27\x55\x5b\xc0\xda\x97\xc8\xf2\x9c\xb9\xd7\x93\xb9\xc9\xad\x00\x4a\x2d\xcd\x30\xcb\x81\xca\x06\x25\x99\x6f\x6f\xdf\xcb\x3a\x5c\x8f\xc4\x2c\x07\xe2\xb2\xc1\x8f\x02\x00\x6e\xf1\x13\x28\x55\x1f\xd0\x39\x54\x23\x1a\x2f\xbd\x93\x86\xb5\xf4\xca\x9a\x50\x7d\x0b\xd5\xa6\x8c\xd5\x7b\xfd\xbf\x7e\x9e\xbb\x8e\x98\x85\xb7\xc2\xd1\xa0\xd8\x93\xdb\x55\xdb\x58\x78\x8b\xc4\xa2\xe2\xcb\x91\xfc\x55\x2a\x9d\xa5\x1d\xc0\xbf\x84\x6b\x38\xe2\xc9\x1a\x26\x28\x46\xb5\x1c\x1a\xb1\x97\xce\x0b\x26\xb7\x1c\x0d\x10\x20\xac\x10\xac\x41\xc5\xb8\x5c\xb2\xde\x9f\x25\x9f\x66\xf8\xd7\xa6\x06\x39\x17\xa7\xc8\xfb\xba\x94\x51\x5e\xf4\xef\xa7\x4e\x81\x43\xff\xfe\x05\x87\x4f\x35\x09\x4f\xec\x85\x23\x9e\xb5\x3f\x75\xfa\x54\x13\x02\x8f\x95\xe7\x1a\xbd\x62\x8f\xd7\x8a\x5f\xc3\x71\xdd\xd7\x55\x69\xe2\xed\x8e\x9c\xb3\x0e\xd5\xcb\xf1\xda\xd2\x73\xe6\x49\x5b\xd9\x8b\x28\x70\xfa\x96\x15\x5e\xdd\xa2\x51\x93\x3b\xf5\x24\x1d\x53\x32\x4b\xe9\x3a\xf5\x8b\x5d\xc9\x35\x74\xe5\x99\x6e\x36\xec\xa5\x9f\xf7\x87\xda\x64\x57\xea\x91\xfa\x9c\x4d\x2a\x4d\xa2\xb7\x1f\x26\xf4\x53\xbf\x3f\x85\xd2\x14\x92\xfe\x44\xf3\x65\x05\xcb\xe5\x40\x3a\x56\xff\x10\x46\xf2\x92\xd9\x39\xa4\x5f\xd4\x89\xce\x8e\xa3\x34\x07\x23\x6c\x8b\x08\x30\x36\x18\x6d\xc5\x2d\x94\x89\xe1\x0b\xe7\x14\xb9\xb6\x7a\x59\xda\x43\xef\x0f\x67\xcd\xf0\x58\xbf\xb8\x5a\x37\xca\xfd\x5f\x40\xa4\x9f\x7f\x45\x2b\x1d\x43\x9e\x4c\x0a\xe0\x67\x71\x2f\x7e\x07\x00\x00\xff\xff\x8b\x57\x6d\x2f\xc7\x05\x00\x00")

func resHostEnMessagesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resHostEnMessagesJson,
		"res/host/en/messages.json",
	)
}

func resHostEnMessagesJson() (*asset, error) {
	bytes, err := resHostEnMessagesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/host/en/messages.json", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1622602850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resHostEnUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resHostEnUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_resHostEnUsageTxt,
		"res/host/en/usage.txt",
	)
}

func resHostEnUsageTxt() (*asset, error) {
	bytes, err := resHostEnUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/host/en/usage.txt", size: 0, mode: os.FileMode(420), modTime: time.Unix(1615634507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resHostResGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resHostResGoBytes() ([]byte, error) {
	return bindataRead(
		_resHostResGo,
		"res/host/res.go",
	)
}

func resHostResGo() (*asset, error) {
	bytes, err := resHostResGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/host/res.go", size: 4096, mode: os.FileMode(420), modTime: time.Unix(1671086675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resHostZhMessagesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xd1\x6e\x12\x41\x14\x86\xef\x79\x8a\xc9\x36\x9b\xde\xf4\x09\x7a\x69\x7c\x0b\x63\x86\x11\xa6\xb8\xc9\xb2\x4b\xe6\xcc\x52\xd3\xa6\x09\x36\x8d\x54\x58\x14\x53\x5a\x2d\xb6\x95\x46\x0c\x78\xa1\xc4\xa8\x0d\x96\x25\x7d\x98\xee\xcc\xae\x57\xbc\x82\xd9\x1d\x8a\x98\xb8\x2c\x34\xd9\x6c\x32\x67\x4e\xfe\xef\x9c\x39\xe7\xdf\xcd\x20\xa4\x99\xc4\x2a\x38\xa4\x40\xb5\x4d\xa4\xed\x3c\xd5\x36\xa2\x58\x91\x02\x90\x02\x05\x6d\x13\x3d\xca\x20\x84\xd0\x6e\xfc\x47\x48\x33\xf2\x51\x9e\x13\xdd\xc6\xa9\x71\x90\x33\x62\x81\x49\xb8\x61\x5b\xd1\xad\x3f\xbe\x09\x5a\x7d\xe9\x56\x45\xe3\xed\xc4\x6b\x6b\x71\xda\xde\xc6\xff\x84\xc0\xc9\xe5\x28\x00\xe6\x36\x66\xb4\x60\x00\xa7\x2c\x51\x56\x7e\xef\x8b\x17\xae\x3c\x6c\x8a\xda\x07\x1d\x6e\x2b\xfb\x8b\x84\xb7\x88\x61\xae\xa0\x2a\xba\xdf\xc2\x1f\x9f\x74\x98\x78\xae\x38\x6a\x88\xeb\x96\x5e\x4e\x01\x00\x27\x8c\x63\xa0\xac\xbc\x40\x5c\x34\x07\xa2\xd6\x97\x67\x0d\x51\xbb\x14\xa7\x7d\x1d\xd0\x6d\x65\x5f\x7d\xcb\x14\x7f\x1f\xc6\x5c\x27\xbf\x5b\xa7\xe1\x60\xb0\xf4\x53\x19\x96\xc1\x71\xfe\x49\x32\xe8\xf0\x5c\xf4\xea\xc2\x3d\x79\xf8\xe0\xfe\x90\x1d\xa3\x84\x39\x05\x8e\x19\x05\xc7\xe4\xc9\xb0\x57\xf5\xc0\xfb\x2c\x7f\xd6\xc3\xc1\x71\x30\x3a\x92\x17\x67\x8a\x39\xf1\xdc\xe0\xfd\x57\xd9\xa9\xae\xeb\xb0\xae\x0e\x62\x7c\x1c\x57\x22\x4f\xaa\xfe\xe8\x6a\x1a\x9f\x96\xb5\x96\x36\xc6\xbb\xba\x9c\x92\x69\x93\x3c\xde\x32\x4c\x0a\xc9\x8b\x3d\xac\xf9\x5e\x47\x71\x66\xe5\xac\xf8\x00\x25\xc2\x80\xde\xe1\x18\x85\x92\x6d\x41\xb2\x95\xc2\xde\x47\x79\xd1\xfc\x87\x1b\xaf\xe7\xaa\xf4\x29\x0f\x38\xe1\x4e\x5a\x7f\x41\xed\x4a\x56\x9e\xcf\x7b\x21\xb5\x37\xc3\xa4\x38\x6f\x6f\x5b\x11\x84\xe6\x93\xbd\x16\x77\xe0\x0f\xeb\xe1\x78\xbc\xac\x8f\xe7\xa5\x31\x90\xf2\x02\x79\x25\x1c\xb4\x0f\x14\x47\x07\xff\xe6\x5c\x7c\x79\xe7\x0f\xaf\x97\x9e\x0e\x7d\x46\x73\x38\x67\x17\x8b\xc4\x5a\xd0\xc6\xcb\x5e\x78\xe9\x8a\x37\x63\x7f\xd4\x55\x83\xc8\xea\x90\x9d\x6d\xa0\xe8\xfe\x9a\x9e\xd5\x70\xb2\xfa\x5a\x39\x9b\xc2\xdf\x66\xb6\x55\x98\xad\x03\xde\xb2\x59\x91\x24\x9b\x43\xe9\x06\xed\x03\x35\x1f\xd9\xf1\x84\xf7\x3a\x5a\xfc\xbf\x94\x0c\x42\x8f\x33\x7b\x99\x3f\x01\x00\x00\xff\xff\x0e\x89\x89\x8c\xe2\x05\x00\x00")

func resHostZhMessagesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resHostZhMessagesJson,
		"res/host/zh/messages.json",
	)
}

func resHostZhMessagesJson() (*asset, error) {
	bytes, err := resHostZhMessagesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/host/zh/messages.json", size: 1506, mode: os.FileMode(420), modTime: time.Unix(1622611937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resHostZhUsageTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resHostZhUsageTxtBytes() ([]byte, error) {
	return bindataRead(
		_resHostZhUsageTxt,
		"res/host/zh/usage.txt",
	)
}

func resHostZhUsageTxt() (*asset, error) {
	bytes, err := resHostZhUsageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/host/zh/usage.txt", size: 0, mode: os.FileMode(420), modTime: time.Unix(1615634507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/host/en/messages.json": resHostEnMessagesJson,
	"res/host/en/usage.txt":     resHostEnUsageTxt,
	"res/host/res.go":           resHostResGo,
	"res/host/zh/messages.json": resHostZhMessagesJson,
	"res/host/zh/usage.txt":     resHostZhUsageTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": {nil, map[string]*bintree{
		"host": {nil, map[string]*bintree{
			"en": {nil, map[string]*bintree{
				"messages.json": {resHostEnMessagesJson, map[string]*bintree{}},
				"usage.txt":     {resHostEnUsageTxt, map[string]*bintree{}},
			}},
			"res.go": {resHostResGo, map[string]*bintree{}},
			"zh": {nil, map[string]*bintree{
				"messages.json": {resHostZhMessagesJson, map[string]*bintree{}},
				"usage.txt":     {resHostZhUsageTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
